
#include <iostream>
#include<list>
#include<bits/stdc++.h>
using namespace std;
class Graph{
  public:
  unordered_map<int,list<int>>ed;

  void addEdge(int u , int v , bool direction){
    if(direction==1){
      //in the case of directed graph
      ed[u].push_back(v);
    }
    else{
      //in the case of directed graph
      ed[u].push_back(v);
      ed[v].push_back(u);
    }

    cout<<"printing list" <<endl;
    print();

  }
  void print(){
    for(auto i : ed){
      
      cout<<i.first<<"->{";
      for(auto neighbour : i.second){
        cout<<neighbour<<",";
      }
      cout<<"}"<<endl;
    }
  }
  bool isCycle(int src ){

    queue<int>q;
    unordered_map<int,bool>visited;
    unordered_map<int,int>parent;
    q.push(src);
    visited[src] = true;
    parent[src] = -1;

    while(!q.empty()){
      int frontnode = q.front();
      q.pop();

      for(auto nbr : ed[frontnode]){
         if(visited[nbr]==0){
          q.push(nbr);
          visited[nbr] = 1;
          parent[nbr] =frontnode;
         }
          else if(visited[nbr]==true && nbr != parent[frontnode]){
            return true;
          }
         
      }
    }
    return false;

  }
};
int main() {
  Graph g;
  g.addEdge(0,1,0);
  g.addEdge(1,2,0);
  g.addEdge(1,3,0);
  g.addEdge(2,4,0);
  g.addEdge(3,4,0);
  g.addEdge(4,5,0);

  if(g.isCycle(0)) cout<<"cycle present"<<endl;
 else cout<<"absent";
  
  return 0;
}
