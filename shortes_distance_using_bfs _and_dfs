#include <iostream>
#include<bits/stdc++.h>
using namespace std;
class Graph{
  public:
  unordered_map<int,list<int>>edgeList;

  void addEdge(int u , int v , bool direction){
       if(direction==1){
         edgeList[u].push_back(v);
       }
       else{
        edgeList[u].push_back(v);
        edgeList[v].push_back(u);
       }
       cout<<endl;
       printList();
       cout<<endl;
  
  }
  void printList(){
    for(auto i : edgeList){
      cout<< i.first << "->{";
      for(auto v : i.second){
        cout<<v<<",";
      }
      cout<<"}"<<endl;
    }
  }
  void topoSort(int src , map<int,bool>&visited , stack<int>&st){
      visited[src] = true;

      for(auto i : edgeList[src]){
        if(!visited[i]){
        topoSort(i,visited,st);
        }
      }
      
      st.push(src);
  }
  void topBFS(int n ,vector<int>&toporder)
  {
     unordered_map<int,int>indegree;
     queue<int>q;

     for(auto i : edgeList){
      for(auto nbr : i.second){
        indegree[nbr]++;
        if(indegree[nbr]==0){
          q.push(nbr);
        }
      }
     }

     for(int node = 0;node<n;node++){
       if(indegree[node]==0){
        q.push(node);
       }
     }

     while(!q.empty()){
        int frontnode = q.front();
        q.pop();
        toporder.push_back(frontnode);

        for(auto nbr : edgeList[frontnode]){
          indegree[nbr]--;

          if(indegree[nbr]==0){
            q.push(nbr);
          }
        }
     }
    }

    void ShortDisBFS(int src , int dis){
      unordered_map<int,bool>vis;
      unordered_map<int,int>parent;

      vis[src] = true;
      parent[src] = -1;
      queue<int>q;
      q.push(src);

      while(!q.empty()){
        int frontnode = q.front();
        q.pop();

        for(auto nbr : edgeList[frontnode]){
          if(!vis[nbr]){
            vis[nbr] = true;
            parent[nbr] = frontnode;
            q.push(nbr);
          }
        }
      }
      vector<int>ans;
      
      while(dis !=-1)
       {
        ans.push_back(dis);
       
        dis = parent[dis];
       }
      reverse(ans.begin(),ans.end());
    for(auto i : ans){
      cout<<i<<" ";
    }
    }
   
  
};
int main() {
  Graph g;
  g.addEdge(0,5,0);
  g.addEdge(5,4,0);
  g.addEdge(4,3,0);
  g.addEdge(0,6,0);
  g.addEdge(6,3,0);
  g.addEdge(0,1,0);
  g.addEdge(1,2,0);
  g.addEdge(2,3,0);

  int src = 0;
  int dest = 3;
  g.ShortDisBFS(src,dest);

  // map<int,bool>vis;
  // int n = 8;
  // g.topBFS(n);
  // cout<<endl;
  // stack<int>st;

  // for(int i = 0;i<n;i++){
  //   if(!vis[i]){
  //  g.topoSort(i,vis,st);
  //   }
  // }
  // while(!st.empty()){
  //   cout<<st.top()<<" ";
  //   st.pop();
  // }
  
}
